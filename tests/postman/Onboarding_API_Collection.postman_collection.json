{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "Employee Onboarding Tool API",
		"description": "Complete API collection for the Employee Onboarding Tool. Includes full CRUD operations for user management with automated tests.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Get API Root",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains welcome message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('Welcome');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Health check endpoint that returns a welcome message."
					},
					"response": []
				},
				{
					"name": "Get API Docs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/docs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"docs"
							]
						},
						"description": "Access the interactive Swagger UI documentation."
					},
					"response": []
				}
			],
			"description": "Basic health check and documentation endpoints."
		},
		{
			"name": "Users - CRUD Operations",
			"item": [
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Users have required properties\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        const user = jsonData[0];",
									"        pm.expect(user).to.have.property('user_id');",
									"        pm.expect(user).to.have.property('email');",
									"        pm.expect(user).to.have.property('full_name');",
									"        pm.expect(user).to.have.property('role');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								""
							]
						},
						"description": "Retrieve a list of all users in the system."
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user_id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('full_name');",
									"    pm.expect(jsonData).to.have.property('role');",
									"    pm.expect(jsonData).to.have.property('created_at');",
									"    pm.expect(jsonData).to.have.property('updated_at');",
									"});",
									"",
									"pm.test(\"User ID matches request\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.user_id).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1"
							]
						},
						"description": "Retrieve a single user by their ID."
					},
					"response": []
				},
				{
					"name": "Get Non-Existent User (404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error message is present\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"    pm.expect(jsonData.detail).to.include('not found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"99999"
							]
						},
						"description": "Test error handling for non-existent user."
					},
					"response": []
				},
				{
					"name": "Create New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"User was created successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user_id');",
									"    pm.expect(jsonData.email).to.eql('demo.user@momentum.com');",
									"    pm.expect(jsonData.full_name).to.eql('Demo User');",
									"    ",
									"    // Save user ID for other requests",
									"    pm.environment.set('created_user_id', jsonData.user_id);",
									"});",
									"",
									"pm.test(\"User has timestamps\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('created_at');",
									"    pm.expect(jsonData).to.have.property('updated_at');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"full_name\": \"Demo User\",\n  \"email\": \"demo.user@momentum.com\",\n  \"sso_identifier\": \"auth0|demo.user\",\n  \"role\": \"new_hire\",\n  \"manager_id\": 2,\n  \"hire_date\": \"2025-11-01\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								""
							]
						},
						"description": "Create a new user in the system. Returns 201 on success."
					},
					"response": []
				},
				{
					"name": "Create User with Duplicate Email (400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error indicates duplicate email\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.include('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"full_name\": \"Another User\",\n  \"email\": \"sarah.chen@momentum.com\",\n  \"sso_identifier\": \"auth0|another.user\",\n  \"role\": \"new_hire\",\n  \"hire_date\": \"2025-11-01\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								""
							]
						},
						"description": "Test duplicate email validation. Should return 400 error."
					},
					"response": []
				},
				{
					"name": "Update User (Partial)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User was updated\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.full_name).to.eql('Updated Demo User');",
									"});",
									"",
									"pm.test(\"Updated timestamp changed\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.updated_at).to.not.eql(jsonData.created_at);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"full_name\": \"Updated Demo User\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/{{created_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{created_user_id}}"
							]
						},
						"description": "Perform a partial update on a user (only updating specified fields)."
					},
					"response": []
				},
				{
					"name": "Update User Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Role was updated\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.role).to.eql('manager');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"role\": \"manager\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/{{created_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{created_user_id}}"
							]
						},
						"description": "Update user role from new_hire to manager."
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Success message returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('deleted successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/{{created_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{created_user_id}}"
							]
						},
						"description": "Delete a user from the system."
					},
					"response": []
				},
				{
					"name": "Delete Non-Existent User (404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error message is present\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"99999"
							]
						},
						"description": "Test error handling when deleting non-existent user."
					},
					"response": []
				}
			],
			"description": "Complete CRUD operations for user management."
		},
		{
			"name": "Demo Workflow",
			"item": [
				{
					"name": "1. List All Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								""
							]
						},
						"description": "Step 1: View all existing users."
					},
					"response": []
				},
				{
					"name": "2. Create New Hire",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set('demo_user_id', jsonData.user_id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"full_name\": \"Jane Smith\",\n  \"email\": \"jane.smith@momentum.com\",\n  \"sso_identifier\": \"auth0|jane.smith\",\n  \"role\": \"new_hire\",\n  \"manager_id\": 2,\n  \"hire_date\": \"2025-11-15\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								""
							]
						},
						"description": "Step 2: Create a new hire user."
					},
					"response": []
				},
				{
					"name": "3. View New User Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/{{demo_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{demo_user_id}}"
							]
						},
						"description": "Step 3: Retrieve the newly created user details."
					},
					"response": []
				},
				{
					"name": "4. Complete Onboarding (Update Role)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"role\": \"manager\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/{{demo_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{demo_user_id}}"
							]
						},
						"description": "Step 4: Promote user after onboarding completion."
					},
					"response": []
				},
				{
					"name": "5. Clean Up (Delete Demo User)",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/{{demo_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{demo_user_id}}"
							]
						},
						"description": "Step 5: Clean up demo data."
					},
					"response": []
				}
			],
			"description": "A complete workflow demonstrating the onboarding process from start to finish."
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
}